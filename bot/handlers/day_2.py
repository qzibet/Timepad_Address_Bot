import os
import re

from django.conf import settings
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async
import logging

from bot.handlers import day_3
from bot.handlers.conversations_states import DAY_3, DAY_4
from bot.models import TelegramUser, Code, SecondDay

logger = logging.getLogger(__name__)
SECRET_PASSWORD = os.getenv("SECRET_PASSWORD")


async def block_0(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç! –° —Ç–æ–±–æ–π —Å–Ω–æ–≤–∞  –¢–∞–π–º–ø–∞–¥—Ä–µ—Å-–±–æ—Ç –∏ –¢–∞–π–º–∏–∫–∞, –º—ã —É–∂–µ —Å–æ—Å–∫—É—á–∏–ª–∏—Å—å! üòç\n\n"
        "–ê —Ç—ã? ü§î"
    )
    button_1 = "–î–∞–∞–∞! –Ø —Ç–æ–∂–µ!"
    button_2 = "–ù—É, –ø–æ—á—Ç–∏üòÖ "
    keyboard = ReplyKeyboardMarkup(
        [[button_1, button_2]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    return DAY_3[0]


async def block_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_url = os.path.join(settings.MEDIA_ROOT, "tsticker.webp")
    text = (
        "–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º —Ç–µ–±—è —Å Timepad –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø—Ä–æ –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!\n\n"
        "üìå –ù–µ –∑–∞–±—ã–≤–∞–π —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–ª–ª–µ–≥, –æ–Ω–∏ 100% —Ç–µ–±–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è!"
    )

    button = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç!"
    keyboard = ReplyKeyboardMarkup(
        [[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )
    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    return DAY_3[1]


async def get_user_by_chat_id(chat_id):
    return await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)


async def save_user(user):
    await sync_to_async(user.save)()


async def block_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = await get_user_by_chat_id(chat_id)
    user.timepad = 5
    await save_user(user)

    photo_url = os.path.join(settings.MEDIA_ROOT, "5sticker.webp")
    text = (
        "–ê –µ—â–µ, —É –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ - **—Ç–∞–π–º–ø–∞–¥–∏–∫–∏**!\n\n"
        "–ò—Ö –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –±–∏–ª–µ—Ç—ã, –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–ª—é—à–∫–∏ –æ—Ç –Ω–∞—Å –∏ –Ω–∞ –º–µ—Ä—á! –û–± —ç—Ç–æ–º –µ—â—ë —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–∑–∂–µ. "
        "–ê –ø–æ–∫–∞ –ª–æ–≤–∏ **5 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤!**\n\n"
        "*PS* –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤ —Ç—ã –º–æ–∂–µ—à—å –∑–¥–µ—Å—å –ø–æ —Å–∏–Ω–µ–π –∫–Ω–æ–ø–∫–µ "
        "¬´–ú–µ–Ω—é¬ª (—Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞) –∏ –¥–∞–ª—å—à–µ ¬´–ö–æ—à–µ–ª–µ–∫¬ª"
    )

    button = "ü§ë"
    keyboard = ReplyKeyboardMarkup(
        [[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )
    return DAY_3[2]


async def block_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = await sync_to_async(
        lambda: SecondDay.objects.first().link_afisha_group
    )()
    text = (
        f"–≠—Ç–æ –Ω–∞—à–∞ [–ê—Ñ–∏—à–∞]({link})) (–¥–µ–ª–∞–π –¢–´–ö –Ω–∞ —Å–ª–æ–≤–æ \"–∞—Ñ–∏—à–∞\")  - –Ω–∞—à–∞ –≥–æ—Ä–¥–æ—Å—Ç—å –∏ –Ω–∞—à–∞ –ª—é–±–æ–≤—å!"
        "–í–µ–¥—å —Ç–∞–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤—Å–µ-–≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ª—é–±–∏–º—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤! –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, "
        "–∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º —É–≤–ª–µ—á–µ–Ω–∏–µ–º ü§© \n\n"
        "–õ–æ–≤–∏ –Ω–∞—à–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –≤–∏–¥–µ–æ!"
    )
    button = "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòä"
    keyboard = ReplyKeyboardMarkup(
        [[button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await update.message.reply_video(
        video="BAACAgIAAxkBAAIobWdPf7nyTnbAEuFBH9eaXCbtn_ZzAAKwcQACD5l4SmPU-vMLf0ycNgQ"
    )
    return DAY_3[3]


async def block_4(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = await sync_to_async(
        lambda: SecondDay.objects.first().link_afisha_group
    )()
    text = (
        f"–ê —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–Ω–∏–µ: *–Ω–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –Ω–∞—à–µ–π* [–ê—Ñ–∏—à–µ]({link}) "
        "–∏ *—Å–∫–∏–Ω—å –µ–≥–æ –Æ–ª–∏–∏ HR.*\n\n"
        "P.S. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç—ã –ø–æ–ª—É—á–∏—à—å *–ø–∞—Ä–æ–ª—å –æ—Ç –Æ–ª–∏–∏ –∏ 5 —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤ –æ—Ç –¢–∞–π–º–∏–∫–∏.*"
    )
    button = "–ü–∞—Ä–æ–ª—å —É –º–µ–Ω—è, –≥–¥–µ –º–æ–∏ —Ç–∞–π–º–ø–∞–¥–∏–∫–∏?"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    return DAY_3[4]


async def block_5(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Prompt user to enter a password.
    """
    chat_id = update.effective_chat.id
    user = await get_user_by_chat_id(chat_id)
    user.timepad += 5
    await save_user(user)
    button = ReplyKeyboardRemove()
    photo_url = os.path.join(settings.MEDIA_ROOT, "5sticker.webp")
    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )
    text = "–û—Ç–ª–∏—á–Ω–æ! –í–≤–æ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ!"
    await update.message.reply_text(text, reply_markup=button)

    context.user_data['awaiting_password'] = True
    return DAY_3[5]


async def verify_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    Verify the entered password.
    """
    password = update.message.text
    return password == SECRET_PASSWORD


async def block_6(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Process the password input and navigate further if correct.
    """
    if not context.user_data.get('awaiting_password', False):
        # If we are not awaiting a password, redirect to the starting block or raise an error
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
        return DAY_3[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    if await verify_password(update, context):
        # Password is correct
        context.user_data['awaiting_password'] = False
        text = (
            "–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ\\!\n\n"
            "–ù–µ —Ç–∞–∫ –¥–∞–≤–Ω–æ —É –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–π –±—Ä–µ–Ω–¥\\-–º–µ–¥–∏–∞ \"–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ\"\\."
            "üìô –≠—Ç–æ –Ω–∞—à –∂—É—Ä–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ —Ö–æ–±–±–∏, "
            "–∫–æ—Ç–æ—Ä—ã–º–∏ —É–≤–ª–µ–∫–∞—é—Ç—Å—è –≥–µ—Ä–æ–∏ –∂—É—Ä–Ω–∞–ª–∞\\.\n\n"
            "*–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ –¥—É—à–µ*: –≥–¥–µ —Å–∞–º—ã–π –∫–ª–∞—Å—Å–Ω—ã–π –∫–∞—Ç–æ–∫, "
            "–∫–∞–∫ –∏ –∑–∞—á–µ–º –∏–≥—Ä–∞—Ç—å –≤ —Å–∫–≤–æ—à –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\\!"
        )

        button = "–ó–¥–æ—Ä–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?"
        keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

        await update.message.reply_text(
            text=text,
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
        return DAY_3[6]  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    else:
        # Password is incorrect
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π üòì –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return DAY_3[5]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥


async def block_7(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("–í—ã–±–µ—Ä–∏ —ç–º–æ–¥–∂–∏, –∫–æ—Ç–æ—Ä–æ–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:")
    button_1 = "üñº"
    button_2 = "üå≥"
    button_3 = "‚úàÔ∏è"

    keyboard = ReplyKeyboardMarkup(
            [[button_1, button_2, button_3]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    return DAY_3[7]


async def block_8(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text
    print(response)
    button = "–û, –¥–∞! –í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )
    links = await sync_to_async(
        lambda: SecondDay.objects.first()
    )()
    if response == "üñº":
        text = (
            f"üñº –ê—Ä—Ç-–±—Ä–∞–Ω—á–∏ –∫–∞–∂–¥—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ ‚Äî —ç—Ç–æ —Ç–≤–æ–π —è–∑—ã–∫ –ª—é–±–≤–∏: {links.art_branches_link}"
        )
    elif response == "üå≥":
        text = (
            f"üå≥ –£–π—Ç–∏ –≤ –ª–µ—Å –∏ —ç—Å—Ç–µ—Ç–∏—á–Ω–æ –≥—Ä—É—Å—Ç–∏—Ç—å...–∏–¥–µ–∞–ª—å–Ω–æ: {links.forest_escapes_link}"
        )
    elif response == "‚úàÔ∏è":
        text = (
            f"‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤–∞–º –∫ –ª–∏—Ü—É: {links.travel_link}"
        )
    else:
        text = "what?:"

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )
    return DAY_3[8]


async def block_9(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = await get_user_by_chat_id(chat_id)
    user.timepad += 5
    await save_user(user)

    photo_url = os.path.join(settings.MEDIA_ROOT, "5sticker.webp")
    text = "–õ–æ–≤–∏ **–µ—â–µ 5 —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤!** –ü–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ!"

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
    )
    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )

    text_2 = (
        "*–°–ú–ú* - —ç—Ç–æ –Ω–∞—à–∞ –ª—é–±–æ–≤—å! \n\n"
        "–í–µ–¥—å –æ—Ç–¥–µ–ª —Ç–∞–∫ –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—à–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏.\n\n"
        "üì£ –ß–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏ –º—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∞ –º—ã —Ö–æ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ "
        "–±–æ–ª—å—à–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ª—é–¥–µ–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è:\n\n"
        "üîπ–∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –∂–∏–∑–Ω—å! \n\n"
        "üîπ–≥–¥–µ –ª—é–±–æ–π –ø–æ–ª—É—á–∏—Ç –∫–ª–∞—Å—Å–Ω—ã–µ —ç–º–æ—Ü–∏–∏!\n\n"
        "üîπ–≥–¥–µ –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —Å–µ–±–µ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø–æ –¥—É—à–µ!"
    )
    button = "–ö—Ä—É—Ç–æ!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text_2,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

    return DAY_3[9]


async def block_10(update: Update, context: ContextTypes.DEFAULT_TYPE):
    links = await sync_to_async(
        lambda: SecondDay.objects.first()
    )()
    text = (
        "–ê —Ç–µ–ø–µ—Ä—å –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è: *–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ —Å–æ—Ü\\. —Å–µ—Ç–∏* üòâ\n\n"
        f"\\- tg\\-–∫–∞–Ω–∞–ª \"–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ\" {links.tg_channel_weekends} \n\n"
        f"\\- tg\\-–∫–∞–Ω–∞–ª –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–µ—Ç–µ—Ä–±—É—Ä–∂—Ü–µ–≤ \"–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –ø–∞—Ä–∞–¥–Ω—ã–µ\" {links.tg_channel_paradnaya} \\_spb\n\n"
        f"\\- [–í–ö]({links.vk_link})\n\n"
        f"\\- [–ò–Ω—Å—Ç–∞–≥—Ä–∞–º]({links.instagram_link}) \\(–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–§\\)\n\n"
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è, *–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\"*\\."
    )
    photo_url = os.path.join(settings.MEDIA_ROOT, "meditationsticker.webp")
    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )
    button = "–ì–æ—Ç–æ–≤–æ ‚úÖ"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

    return DAY_3[10]


async def block_11(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = await get_user_by_chat_id(chat_id)
    user.timepad += 5
    await save_user(user)

    text = ("–õ–æ–≤–∏ *5 —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤* –∏ 100 –ø–ª—é—Å–æ–≤ –∫ –∫–∞—Ä–º–µ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–¥–µ–ª–∞!")

    button = "–£—Ä–∞!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    photo_url = os.path.join(settings.MEDIA_ROOT, "5sticker.webp")
    await update.message.reply_sticker(
        sticker=open(photo_url, 'rb'),
    )
    return DAY_3[11]


async def block_12(update: Update, context: ContextTypes.DEFAULT_TYPE):
    links = await sync_to_async(
        lambda: SecondDay.objects.first()
    )()
    text = (
        f"–ï—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –¥–≤–∞ –ø–æ–¥–∫–∞—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –Ω–∞ –¥–æ—Å—É–≥–µ:\n\n"
        f"üéß\"[–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ]({links.podcast_save_my_weekend})\" —Å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –í–∞—Ä–µ–π –°–µ–º–µ–Ω–∏—Ö–∏–Ω–æ–π "
        f"–ü–æ–¥–∫–∞—Å—Ç –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞–π—Ç–∏ –ª—é–±–∏–º–æ–µ –¥–µ–ª–æ –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –≤ —É—Å–ø–µ—à–Ω—ã–π –±–∏–∑–Ω–µ—Å! \n\n"
        f"üéß\"[–¢–æ—á–Ω–æ –∏–¥–µ–º]({links.podcast_tochno_idem})\". –≠—Ç–æ –ø–æ–¥–∫–∞—Å—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã Timepad. –í –Ω–µ–º –ø—Ä–æ–±—É–µ–º "
        f"—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ö–æ–±–±–∏ –∑–∞–Ω—è—Ç—ã—Ö –≥–æ—Ä–æ–∂–∞–Ω, –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ —É–≤–ª–µ—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–Ω—è—Ç—å, "
        f"–∫–∞–∫ –≤—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö –≤ –ø–æ–ª–Ω—É—é —Ä–∞–±–æ—Ç—ã –∂–∏–∑–Ω—å! "
    )
    button = "–û, –∫–∞–∫ –∫–ª–∞—Å—Å–Ω–æ! üéß"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

    return DAY_3[12]


async def block_13(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "*üìä –ê –µ—â–µ —É –Ω–∞—Å –µ—Å—Ç—å –û—Ç–¥–µ–ª —Ä–µ–∫–ª–∞–º—ã!* \n\n"
        "–ì–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫—Ä—É—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞—Å—Ç–∏—Ç—å –Ω–∞–º –≤—ã—Ä—É—á–∫—É: \n\n"
        "*–ú—ã –ø—Ä–æ–¥–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã, –º–µ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –∞ —Ç–∞–∫–∂–µ –≤–µ—Ä—Å—Ç–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –∏ —Ä–∞—Å—Å—ã–ª–∫–∏!*"
    )
    button = "–£—Ö! –í–æ—Ç —ç—Ç–æ –¥–∞!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    return DAY_3[13]


async def block_14(update: Update, context: ContextTypes.DEFAULT_TYPE):
    links = await sync_to_async(
        lambda: SecondDay.objects.first()
    )()
    text = (
        f"–ê —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–ª–ª–µ–≥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –ª—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:\n\n"
        f"üìå *–ü—Ä–æ –ê—Ñ–∏—à—É* \\- –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –±–∏–ª–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –î–∞—à–∞ –ï–≥–æ—Ä–æ–≤–∞ {links.development_director_contact} \n\n"
        f"üìå *–ü—Ä–æ –∂—É—Ä–Ω–∞–ª \"–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ\"* \\- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –î–∞—à–∞ –ì–∞–π–¥—É–∫–æ–≤–∞ {links.marketing_director_contact}\n\n"
        f"üìå *–ü—Ä–æ –°–ú–ú* \\- –°–ú–ú—â–∏—Ü–∞ –ú–∞—à–∞ –ü–æ–ø–æ–≤–∞ {links.smm_specialist_contact}\n\n"
        f"üìå *–ü—Ä–æ —Ä–µ–∫–ª–∞–º—É* \\- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ —Ä–µ–∫–ª–∞–º—ã –ê–∑–∞–º–∞—Ç –û—Ä–∫–≤–∞—Å–æ–≤ {links.advertising_director_contact}"
    )
    keyboard = ReplyKeyboardMarkup(
            [["–£–∂–µ –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö ü´° "]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=keyboard
    )
    return DAY_3[14]


async def block_15(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–°–æ–≥–ª–∞—Å–∏—Å—å, —É –Ω–∞—Å –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ? üé™"
    )
    button = "–î–∞–∞–∞–∞–∞!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

    return DAY_3[15]


async def block_16(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['test_score'] = 0
    text = (
        "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —á–µ–∫-–∞–ø —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –∑–∞–ø–æ–º–Ω–∏–ª! \n\n"
        "–ü—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç ü§ì \n\n"
        "P.S. –ó–∞ –∫–∞–∂–¥—ã–π –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç–µ–±–µ –Ω–∞—á–∏—Å–ª—è—Ç —Ç–∞–π–º–ø–∞–¥–∏–∫–∏!"
    )
    button = ReplyKeyboardRemove()

    await update.message.reply_text(
        text=text,
        parse_mode="Markdown",
        reply_markup=button
    )

    text_2 = (
        "–¢–æ–≥–¥–∞ –ø–æ–≥–Ω–∞–ª–∏! \n\n"
        "–ò –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, *–≤ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –º—ã —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏?*"
    )
    await update.message.reply_text(
        text=text_2,
        parse_mode="Markdown",
        reply_markup=button
    )

    return DAY_3[16]


async def block_17(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text

    if re.search(r"\b–µ–≤–∞\b", response, re.IGNORECASE):
        context.user_data['test_score'] += 1
        chat_id = update.effective_chat.id
        user = await get_user_by_chat_id(chat_id)
        user.timepad += 1
        await save_user(user)
        await update.message.reply_text("–í–µ—Ä–Ω–æ! + 1 —Ç–∞–π–º–ø–∞–¥–∏–∫")
        await update.message.reply_text(
            "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å, *—Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–ª—à–µ–±–Ω—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É? ü™Ñ*",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text("–≠—Ö, –∫–∞–∫ –∂–µ —Ç—ã –∑–∞–±—ã–ª –Ω–∞—à—É –ï–í–£üòì")
        await update.message.reply_text(
            "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å, *—Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–ª—à–µ–±–Ω—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É? ü™Ñ*",
            parse_mode="Markdown",
        )

    return DAY_3[17]


async def block_18(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text

    if re.search(r"\b3\b", response, re.IGNORECASE):
        context.user_data['test_score'] += 1
        chat_id = update.effective_chat.id
        user = await get_user_by_chat_id(chat_id)
        user.timepad += 1
        await save_user(user)
        await update.message.reply_text("–í–µ—Ä–Ω–æ! + 1 —Ç–∞–π–º–ø–∞–¥–∏–∫")
        await update.message.reply_text(
            "–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å, *–∫–∞–∫ –Ω–∞–∑—ã–≤–µ—Ç—Å—è –Ω–∞—à tg-–∫–∞–Ω–∞–ª —Å –∞—Ñ–∏—à–æ–π?*",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text("–í–æ–ª—à–µ–±–Ω—ã–µ 3 –¥–Ω—è! ü™Ñ")
        await update.message.reply_text(
            "–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å, *–∫–∞–∫ –Ω–∞–∑—ã–≤–µ—Ç—Å—è –Ω–∞—à tg-–∫–∞–Ω–∞–ª —Å –∞—Ñ–∏—à–æ–π?*",
            parse_mode="Markdown",
        )

    return DAY_3[18]


async def block_19(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text

    if re.search(r"\b–°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ\b", response, re.IGNORECASE):
        context.user_data['test_score'] += 1
        chat_id = update.effective_chat.id
        user = await get_user_by_chat_id(chat_id)
        user.timepad += 1
        await save_user(user)
        await update.message.reply_text("–í–µ—Ä–Ω–æ! + 1 —Ç–∞–π–º–ø–∞–¥–∏–∫")
        await update.message.reply_text(
            "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å, *–≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ñ–æ—Ç–∫–∞–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è?* "
            "(—ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –Ω–∞—à–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –Ω–µ–ª—å–∑—è–≥—Ä–∞–º–º üòÇ)",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text("–≠—Ö, –°–ø–∞—Å–∏—Ç–µ –º–æ–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ! @TimepadRU")
        await update.message.reply_text(
            "–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å, **–≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ —Ñ–æ—Ç–∫–∞–º–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è? "
            "**(—ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –Ω–∞—à–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–µ –Ω–µ–ª—å–∑—è–≥—Ä–∞–º–º üòÇ)",
            parse_mode="Markdown",
        )
    return DAY_3[19]


async def block_20(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text

    if re.search(r"\bOfftop Timepad\b", response, re.IGNORECASE):
        context.user_data['test_score'] += 1
        chat_id = update.effective_chat.id
        user = await get_user_by_chat_id(chat_id)
        user.timepad += 1
        await save_user(user)
        await update.message.reply_text("–í–µ—Ä–Ω–æ! + 1 —Ç–∞–π–º–ø–∞–¥–∏–∫")
        cats_txt = (
            "–ö—Å—Ç–∞—Ç–∏, *–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –º—ã –¥–µ–ª–∏–ºc—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å–≤–æ–∏—Ö —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö –¥—Ä—É–∑–µ–π!* –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü, "
            "—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –∫ –Ω–∞—à–µ–π –º–∏–ª–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ üêæ"
        )
        await update.message.reply_photo(
            photo="https://disk.yandex.ru/i/E5teV7j_hL-45Q",
            caption=cats_txt,
            parse_mode="Markdown",
        )
        await update.message.reply_text(
            "–ò —Ñ–∏–Ω–∞–ª–Ω—ã–π - –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å, –≤—Å—Ç–∞–≤—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: \n\n"
            "*–ú—ã __ ________ —É–≤–ª–µ—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–ª—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏*",
            parse_mode="Markdown",
        )
    else:
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - Offtop Timepad")
        cats_txt = (
            "–ö—Å—Ç–∞—Ç–∏, *–∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –º—ã –¥–µ–ª–∏–ºc—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å–≤–æ–∏—Ö —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö –¥—Ä—É–∑–µ–π!* –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü, "
            "—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –∫ –Ω–∞—à–µ–π –º–∏–ª–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ üêæ"
        )
        await update.message.reply_photo(
            photo="https://disk.yandex.ru/i/E5teV7j_hL-45Q",
            caption=cats_txt,
            parse_mode="Markdown",
        )
        await update.message.reply_text(
            "–ò —Ñ–∏–Ω–∞–ª–Ω—ã–π - –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å, –≤—Å—Ç–∞–≤—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: \n\n"
            "*–ú—ã __ ________ —É–≤–ª–µ—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–ª—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏*",
            parse_mode="Markdown",
        )
    return DAY_3[20]


async def block_21(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = update.message.text
    button = "–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω üìã"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )

    if re.search(r"\b–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º\b", response, re.IGNORECASE):
        context.user_data['test_score'] += 1
        chat_id = update.effective_chat.id
        user = await get_user_by_chat_id(chat_id)
        user.timepad += 1
        await save_user(user)
        await update.message.reply_text(
            "–í–µ—Ä–Ω–æ! + 1 —Ç–∞–π–º–ø–∞–¥–∏–∫",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            "–ö–∞–∫ –∂–µ —Ç—ã –∑–∞–±—ã–ª –Ω–∞—à—É –º–∏—Å—Å–∏—é ü•∫ –ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º!",
            reply_markup=keyboard
        )

    return DAY_3[21]


async def block_22(update: Update, context: ContextTypes.DEFAULT_TYPE):
    test_score = context.user_data.get('test_score', 0)
    text = (
        "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –õ–æ–≤–∏ –µ—â–µ –∑–∞—Å–ª—É–∂–µ–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!"
    )
    button = "–£—Ä–∞! –ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ!"
    keyboard = ReplyKeyboardMarkup(
            [[button]],
            resize_keyboard=True,
            one_time_keyboard=True
    )
    remove_button = ReplyKeyboardRemove()

    if test_score == 1:
        image_url = os.path.join(settings.MEDIA_ROOT, "1sticker.webp")
    elif test_score == 2:
        image_url = os.path.join(settings.MEDIA_ROOT, "2sticker.webp")
    elif test_score == 3:
        image_url = os.path.join(settings.MEDIA_ROOT, "3sticker.webp")
    elif test_score == 4:
        image_url = os.path.join(settings.MEDIA_ROOT, "4sticker.webp")
    elif test_score == 5:
        image_url = os.path.join(settings.MEDIA_ROOT, "5sticker.webp")
    else:
        button_2 = "–•–æ—Ä–æ—à–æ, —Å–¥–µ–ª–∞—éüí™"
        keyboard_2 = ReplyKeyboardMarkup(
            [[button_2]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "–≠—Ç–æ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, "
            "–æ–Ω–∞ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ!",
            reply_markup=keyboard_2
        )
        return DAY_3[22]

    await update.message.reply_text(
        text=text,
        reply_markup=keyboard
    )
    await update.message.reply_sticker(
        sticker=open(image_url, 'rb'),
    )
    return DAY_3[22]


async def block_23(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —ç—Ç–æ –≤—Å–µ! –í—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º! –ß–∞–æ üñê"
    )
    button = ReplyKeyboardRemove()

    await update.message.reply_text(
        text=text,
        reply_markup=button
    )
    await day_3.block_0(update, context)
    return DAY_4[0]






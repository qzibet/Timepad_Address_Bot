import logging
import os

from asgiref.sync import sync_to_async
from django.conf import settings
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from bot.handlers import month_2
from bot.handlers.conversations_states import MONTH_1, MONTH_2
from bot.models import TelegramUser

logger = logging.getLogger(__name__)
MONTH_SECRET_PASSWORD = os.getenv("MONTH_SECRET_PASSWORD")


async def get_user_by_chat_id(chat_id):
    return await sync_to_async(TelegramUser.objects.get)(chat_id=chat_id)


async def save_user(user):
    await sync_to_async(user.save)()


async def block_0(chat_id, context):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!  –≠—Ç–æ  –¢–∞–π–º–ø–∞–¥—Ä–µ—Å, —Ç–≤–æ–π –¥–∞–≤–Ω–∏–π –¥—Ä—É–≥! –î–∞–≤–Ω–æ –º—ã —Å —Ç–æ–±–æ–π –Ω–µ –æ–±—â–∞–ª–∏—Å—å. "
        "–•–æ—á—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞ üòâ"
    )
    button_1 = "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!"
    button_2 = "–û, –∫–∞–∫–∞—è –≤—Å—Ç—Ä–µ—á–∞!"

    keyboard = ReplyKeyboardMarkup(
        [[button_1, button_2]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown",
    )
    return MONTH_1[0]


async def block_1(chat_id, context):
    text = (
        "–ó–∞–ø–æ–ª–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—Ç–∫—É—é [–∞–Ω–∫–µ—Ç—É](https://docs.google.com/forms/d/e/1FAIpQLScEQfKbumuqSd_3DeR1WDtQJUt5fYvUQEnGFJWgqXLmm9MLyQ/viewform) –æ —Ç–æ–º, –∫–∞–∫ "
        "–ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.(–¢–´–ö –Ω–∞ —Å–ª–æ–≤–æ \"–∞–Ω–∫–µ—Ç–∞\") \n\n"
        "–í –∫–æ–Ω—Ü–µ –æ–ø—Ä–æ—Å–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å *–∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ,* –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–ø–∞–¥–∏–∫–∏! \n\n"
        "–ê —è —Å–∫–æ—Ä–æ –Ω–∞–ø–∏—à—É —Ç–µ–±–µ —Å–Ω–æ–≤–∞, –¥–æ —Å–≤—è–∑–∏! ü§ì"
    )
    keyboard = ReplyKeyboardMarkup(
        [["–ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown",
    )
    return MONTH_1[1]


async def block_2(chat_id, context):
    text = "–°—É–ø–µ—Ä! –ù–∞–ø–∏—à–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æüòâ"
    button = ReplyKeyboardRemove()

    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=button
    )

    context.user_data['awaiting_password'] = True
    return MONTH_1[2]


async def block_3(chat_id, context):
    if context.user_data.get('awaiting_password', False):
        password = context.user_data.get('last_response')
        print(password)

        if password == MONTH_SECRET_PASSWORD:
            photo_url = os.path.join(settings.MEDIA_ROOT, "10sticker.webp")
            text = "–õ–æ–≤–∏ *10 —Ç–∞–π–º–ø–∞–¥–∏–∫–æ–≤!* –ò —É—Å–ø–µ—Ö–æ–≤ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏! üçÄ"
            await context.bot.send_sticker(
                sticker=open(photo_url, 'rb'),
                chat_id=chat_id
            )
            user = await get_user_by_chat_id(chat_id)
            user.timepad += 10
            await save_user(user)
            await context.bot.send_message(
                chat_id=chat_id, text=text, parse_mode="Markdown"
            )
        else:
            await context.bot.send_message(chat_id=chat_id, text="–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π üòì –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

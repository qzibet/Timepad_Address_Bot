import asyncio
from functools import partial

import pytz
from datetime import datetime, timedelta, date

from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler, JobQueue
from telegram.ext import ContextTypes, CallbackContext

from bot.handlers import day_of_work, day_2, day_3, day_4, day_5, month_1, month_2, month_3
from asgiref.sync import sync_to_async

from bot.handlers.conversations_states import DAY_2, DAY_3, DAY_4, DAY_5, DAY_6, MONTH_1, MONTH_2, MONTH_3
from bot.models import TelegramUser, UserConversationState

AWAITING_NEXT = range(9999)

DAY_FUNCTIONS = {
    1: day_of_work.block_0,
    2: day_2.block_0,
    3: day_3.block_0,
    4: day_4.block_0,
    5: day_5.block_0,
    30: month_1.block_0,
    60: month_2.block_0,
    90: month_3.block_0,
}

STATE = {
    1: DAY_2[0],
    2: DAY_3[0],
    3: DAY_4[0],
    4: DAY_5[0],
    5: DAY_6[0],
    30: MONTH_1[0],
    60: MONTH_2[0],
    90: MONTH_3[0]
}

DAY_BLOCKS = {
    1: [
        day_of_work.block_0,
        day_of_work.block_1,
        day_of_work.block_2,
        day_of_work.block_3,
        day_of_work.block_4,
        day_of_work.block_5,
        day_of_work.block_6,
        day_of_work.block_7,
        day_of_work.block_8,
        day_of_work.block_9,
        day_of_work.block_10,
        day_of_work.block_11,
        day_of_work.block_12,
        day_of_work.block_13,
        day_of_work.block_14,
        day_of_work.block_15,
        day_of_work.block_16,
        day_of_work.block_17,
        day_of_work.block_18,
        day_of_work.block_19,
        day_of_work.block_20,
    ],
    2: [
        day_2.block_0,
        day_2.block_1,
        day_2.block_3,
        day_2.block_4,
        day_2.block_5,
        day_2.block_6,
        day_2.block_7,
        day_2.block_8,
        day_2.block_9,
        day_2.block_10,
        day_2.block_11,
        day_2.block_12,
        day_2.block_13,
        day_2.block_14,
        day_2.block_15,
        day_2.block_16,
        day_2.block_17,
        day_2.block_18,
        day_2.block_19,
        day_2.block_20,
        day_2.block_21,
        day_2.block_22,
        day_2.block_23
    ],
    3: [
        day_3.block_0,
        day_3.block_1,
        day_3.block_3,
        day_3.block_4,
    ],
    4: [
        day_4.block_0,
        day_4.block_1,
        day_4.block_3,
        day_4.block_4,
        day_4.block_5,
        day_4.block_6,
        day_4.block_7,
        day_4.block_8,
        day_4.block_9,
        day_4.block_10,
        day_4.block_11,
        day_4.block_12,
        day_4.block_13,
        day_4.block_14,
    ],
    5: [
        day_5.block_0,
        day_5.block_1,
        day_5.block_3,
        day_5.block_4,
    ],
    45: [
        month_1.block_0,
        month_1.block_1,
        month_1.block_2,
        month_1.block_3,
    ],
    60: [
        month_2.block_0,
        month_2.block_1,
        month_2.block_2,
        month_2.block_3,
        month_2.block_4
    ],
    90: [
        month_3.block_0,
        month_3.block_1,
        month_3.block_2,
        month_3.block_3,
        month_3.block_4,
    ],

}


def count_business_days(start_date, end_date):
    if start_date > end_date:
        return 0
    day_count = 0
    current_day = start_date
    while current_day <= end_date:
        if current_day.weekday() < 5:  # –ü–Ω‚Äì–ü—Ç
            day_count += 1
        current_day += timedelta(days=1)
    return day_count


async def daily_alarm(context: CallbackContext):
    print("daily_alarm –∑–∞–ø—É—â–µ–Ω")

    moscow_tz = pytz.timezone("Europe/Moscow")
    today = datetime.now(moscow_tz).date()

    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ (5) –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6), –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if today.weekday() >= 5:
        print("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return

    users = await sync_to_async(
        lambda: list(
            TelegramUser.objects.select_related("code").filter(
                code__isnull=False
            ).exclude(code__start_date__isnull=True)
        )
    )()

    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã")

    if not users:
        return

    for user in users:
        start_date = user.code.start_date
        if not start_date:
            continue

        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ
        business_days_elapsed = count_business_days(start_date, today)

        # –ï—Å–ª–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –º–µ–Ω—å—à–µ 1, —Ç–æ –¥–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—Å—Ç–∞–ª
        if business_days_elapsed < 1:
            continue

        # –°–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö" –¥–Ω–µ–π (–ø–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ)
        periods = [1, 2, 3, 4, 5, 45, 60, 90]

        # –ï—Å–ª–∏ —ç—Ç–æ—Ç "—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å" –≤—Ö–æ–¥–∏—Ç –≤ –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
        if business_days_elapsed in periods:
            day_blocks = DAY_BLOCKS.get(business_days_elapsed)
            chat_id = user.chat_id
            print(
                f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} –≤ —á–∞—Ç {chat_id}, business_days_elapsed={business_days_elapsed}")

            if day_blocks:
                try:
                    block_func = day_blocks[0]
                    print(f"–í—ã–ø–æ–ª–Ω—è–µ–º block_0 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                    await block_func(chat_id, context)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await sync_to_async(
                        UserConversationState.objects.update_or_create,
                        thread_sensitive=True
                    )(
                        user=user,
                        defaults={
                            "chat_id": chat_id,
                            "state": f"DAY_{business_days_elapsed}[BLOCK_0]"
                        }
                    )
                    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: DAY_{business_days_elapsed}[BLOCK_0]")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")


def sync_wrapper(func, *args, **kwargs):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    loop = asyncio.get_event_loop()
    loop.run_until_complete(func(*args, **kwargs))


async def handle_user_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_response = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await sync_to_async(lambda: TelegramUser.objects.get(chat_id=chat_id))()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_state = await sync_to_async(lambda: UserConversationState.objects.get(user=user))()
    except UserConversationState.DoesNotExist:
        # await context.bot.send_message(chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        print()
        return

    # –†–∞–∑–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        state_parts = user_state.state.strip("]").split("[")  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ "["
        current_day = state_parts[0].replace("DAY_", "")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        current_block = state_parts[1].replace("BLOCK_", "")  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
    except (IndexError, ValueError) as e:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
        return

    try:
        current_day = int(current_day)
        current_block_index = int(current_block)
    except ValueError as e:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –¥–Ω—è
    day_blocks = DAY_BLOCKS.get(current_day)
    if not day_blocks:
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª–æ–∫–∏ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ 11 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_day == 1 and current_block_index == 11:
        user_choice = user_response.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_choice in ["–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä", "–ò–Ω–∞—è —Ñ–æ—Ä–º–∞"]:
            user.employment_type = user_choice
            await sync_to_async(user.save)()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ TelegramUser
            print(f"–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {user_choice}")
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä' –∏–ª–∏ '–ò–Ω–∞—è —Ñ–æ—Ä–º–∞'.",
            )
            return

    if current_day == 2 and current_block_index == 6:
        user_choice = user_response.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_choice in ["üñº", "üå≥", "‚úàÔ∏è"]:
            user.emodji = user_choice
            await sync_to_async(user.save)()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ TelegramUser
            print(f"–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {user_choice}")
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 'üñº', 'üå≥', '‚úàÔ∏è' ",
            )
            return

    if current_day == 3 and current_block_index == 0:
        user_choice = user_response.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_choice in ["–°—É–ø–µ—Ä!", "–•–æ—Ä–æ—à–µ–µ", "–¢–∞–∫ —Å–µ–±–µ", "–ü–ª–æ—Ö–æ–µ"]:
            user.mood_third_day = user_choice
            await sync_to_async(user.save)()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ TelegramUser
            print(f"–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {user_choice}")
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä' –∏–ª–∏ '–ò–Ω–∞—è —Ñ–æ—Ä–º–∞'.",
            )
            return

    if current_day == 60 and current_block_index == 1:
        user_choice = user_response.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_choice in ["–í—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!", "–ù–æ—Ä–º", "–ù—É, —Ç–∞–∫–æ–µ", "–°–æ–≤—Å–µ–º –Ω–µ –æ—á–µ–Ω—å"]:
            user.mood_second_month = user_choice
            await sync_to_async(user.save)()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ TelegramUser
            print(f"–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {user_choice}")
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä' –∏–ª–∏ '–ò–Ω–∞—è —Ñ–æ—Ä–º–∞'.",
            )
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    if current_block_index + 1 < len(day_blocks):
        context.user_data['last_response'] = user_response.strip()

        next_block_func = day_blocks[current_block_index + 1]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º block_{current_block_index + 1} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        next_block = await next_block_func(chat_id, context)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await sync_to_async(
            UserConversationState.objects.update_or_create,
            thread_sensitive=True
        )(
            user=user,
            defaults={
                "chat_id": chat_id,
                "state": f"DAY_{current_day}[BLOCK_{current_block_index + 1}]"  # –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
            }
        )
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: DAY_{current_day}[BLOCK_{current_block_index + 1}]")
    else:
        print(f"–í—Å–µ –±–ª–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        await sync_to_async(UserConversationState.objects.filter(user=user).delete)()
